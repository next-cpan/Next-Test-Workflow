name:    "Check Pull Request"
# version: XXXXX

on:
  pull_request:
    types: [opened,reopened,edited]
    branches: ["p5"]

# name: automerge
# on:
#   pull_request:
#     types:
#       - labeled
#       - unlabeled
#       - synchronize
#       - opened
#       - edited
#       - ready_for_review
#       - reopened
#       - unlocked
#   pull_request_review:
#     types:
#       - submitted
#   check_suite:
#     types:
#       - completed
#   status: {}

jobs:

##
## lint Checks
##

# view ideas from https://peterevans.dev/posts/github-actions-how-to-automate-code-formatting-in-pull-requests/

  lint:
    if: github.event.repository.owner.login == 'next-cpan'

    name: Running lint checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: context
        run: |
          echo "github.actor ${{ github.actor }}"
          echo "github.event.repository.owner.login ${{ github.event.repository.owner.login }}"
      - name: "running lint..."
        run: |
          echo "rebase..."
          echo "Confirm no generated files are altered"
          echo "Update the NEXT.json using .next/hints.yaml"
          echo "Assure VERSION not bumped in NEXT.json"
          echo "Check no new modules owned by other distros"
          true
      # maybe push to a local branch check_pr_$id so unit tests can start using it
      - name: Checking Pull Request
        uses: next-cpan/next-ci-action@master
        with:
          stage: lint
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BOT_ACCESS_TOKEN: ${{ secrets.BOT_ACCESS_TOKEN }}


 # on_failure:
 #     if: failure()
 #     - name: Close Pull
 #        uses: peter-evans/close-pull@v1
 #        with:
 #          pull-request-number: ${{ pull_request.number }}
 #          comment: Auto-closing pull request
 #          delete-branch: true

##
## Running the test suite
##
  tests:
    if: github.event.repository.owner.login == 'next-cpan'

    name: "Testing with cnext"
    needs: lint
    runs-on: ubuntu-latest
    # strategy:
    #   fail-fast: false
    #   matrix:
    #     node: ['5.30', '5.28', '5.26']
    steps:
      # no need to checkout --- FIXME we should checkout the patched version and run cnext test .
      # FIXME
      # checkout from the created/updated branch during lint process
      # download cnext      
      # cnext install .
      # checking if primary module is installed
      # - run: generate_NEXT_and_co_files
      # - run: actions/checkout@v2
      #   with:
      #       ref: check_pr_$id
      - name: using install-with-cnext
        uses: perl-actions/install-with-cnext@cnext-ci
    # FIXME check the installation of module

##
## Running the next-ci-action
##
  merge:
    runs-on: ubuntu-latest
    needs: tests
    if: github.event.repository.owner.login == 'next-cpan'
    if: always() # set always
    steps:
      - uses: actions/checkout@v2
        # run this action to get workflow conclusion
        # You can get conclusion by env (env.WORKFLOW_CONCLUSION)
        # https://github.com/marketplace/actions/workflow-conclusion-action
      - uses: technote-space/workflow-conclusion-action@v1.1.1
      - name: Checking Pull Request
        uses: next-cpan/next-ci-action@master
        with:
          stage: check_ci
          conclusion: ${{ env.WORKFLOW_CONCLUSION }} # neutral, success, cancelled, timed_out, failure
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BOT_ACCESS_TOKEN: ${{ secrets.BOT_ACCESS_TOKEN }}
        #if: env.WORKFLOW_CONCLUSION == 'failure'

# if: ${{ always() }}
# if: ${{ cancelled() }}
# if: ${{ success() }}
# if: failure()
# if: startsWith(github.ref, 'refs/tags/v')
#    if: always() # set always
# https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#job-status-check-functions

