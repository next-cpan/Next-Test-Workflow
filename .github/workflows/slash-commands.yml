on: issue_comment
name: Issue Comments

# https://github.com/xt0rted/slash-command-action
#   also view https://github.com/peter-evans/slash-command-dispatch

jobs:
  check_comments:
    runs-on: ubuntu-latest
    name: Check comments for /test
    if: github.repository_owner == 'next-cpan' && github.event.issue.pull_request != null
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      # command
      - name: Check for Command
        id: command
        uses: xt0rted/slash-command-action@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          command: test
          reaction: "true"
          reaction-type: "rocket"
          allow-edits: "false"
          permission-level: admin
      - name: Act on the command
        run: echo "The command was '${{ steps.command.outputs.command-name }}' with arguments '${{ steps.command.outputs.command-arguments }}'"
      - run: echo "${{ github.repository_owner }}"
      - run: echo "Continue"
      ## dump
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "$MATRIX_CONTEXT"

  lint:
    name: Running lint checks
    needs: check_comments
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: "running lint..."
        run: |
          echo "rebase..."
          echo "Confirm no generated files are altered"
          echo "Update the NEXT.json using .next/hints.yaml"
          echo "Assure VERSION not bumped in NEXT.json"
          echo "Check no new modules owned by other distros"
          true
      # maybe push to a local branch check_pr_$id so unit tests can start using it
      - name: Checking Pull Request
        uses: next-cpan/next-ci-action@master
        with:
          stage: lint
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BOT_ACCESS_TOKEN: ${{ secrets.BOT_ACCESS_TOKEN }}
          PR_NUMBER: ${{ github.event.issue.number }}

  tests:
    name: "Testing with cnext"
    needs: lint
    runs-on: ubuntu-latest
    # strategy:
    #   fail-fast: false
    #   matrix:
    #     node: ['5.30', '5.28', '5.26']
    steps:
      # no need to checkout --- FIXME we should checkout the patched version and run cnext test .
      # FIXME
      # checkout from the created/updated branch during lint process
      # download cnext
      # cnext install .
      # checking if primary module is installed
      # - run: generate_NEXT_and_co_files
      # - run: actions/checkout@v2
      #   with:
      #       ref: check_pr_$id
      - name: using install-with-cnext
        uses: perl-actions/install-with-cnext@cnext-ci

  ##
  ## Running the next-ci-action
  ##
  merge:
    runs-on: ubuntu-latest
    needs: tests
    if: always()
    steps:
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "$MATRIX_CONTEXT"
      - run: /bin/false              
      - uses: actions/checkout@v2
      # run this action to get workflow conclusion
      # You can get conclusion by env (env.WORKFLOW_CONCLUSION)
      # https://github.com/marketplace/actions/workflow-conclusion-action
      - uses: technote-space/workflow-conclusion-action@v1.1.1
      - name: Checking Pull Request
        uses: next-cpan/next-ci-action@master
        with:
          stage: check_ci
          conclusion: ${{ env.WORKFLOW_CONCLUSION }} # neutral, success, cancelled, timed_out, failure
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BOT_ACCESS_TOKEN: ${{ secrets.BOT_ACCESS_TOKEN }}
